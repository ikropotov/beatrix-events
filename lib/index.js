// Generated by CoffeeScript 1.12.7
(function() {
  var Beatrix, Manager, Promise, Sift, _, uuid;

  Beatrix = require('beatrix');

  Sift = require('sift');

  _ = require('lodash');

  uuid = require('uuid');

  Promise = require('bluebird');

  Manager = (function() {
    function Manager() {}

    Manager.prototype.name = null;

    Manager.prototype.connection = null;

    Manager.prototype.onReadyStack = [];

    Manager.prototype.ready = function(fn) {
      var ref;
      if ((ref = this.connection) != null ? ref.ready : void 0) {
        return fn();
      } else {
        return this.onReadyStack.push(fn);
      }
    };

    Manager.prototype.connect = function(options, cb) {
      if (cb == null) {
        cb = function(err) {
          if (err) {
            throw err;
          }
        };
      }
      this.name = options.name;
      return this.connection = Beatrix({
        connection: {
          uri: options.uri
        },
        exchange: {
          name: 'events',
          autoDelete: false,
          durable: true,
          type: 'topic'
        },
        responseQueue: false
      }, (function(_this) {
        return function(err, res) {
          if (err) {
            return cb(err);
          } else {
            _this.connection.ready = true;
            _this.onReadyStack.forEach(function(fn) {
              return fn();
            });
            return cb();
          }
        };
      })(this));
    };

    Manager.prototype.filter = function(filter, message) {
      if ('function' === typeof filter) {
        return filter(message);
      }
      if ('object' === typeof filter) {
        return Sift(filter)(message);
      }
      return true;
    };

    Manager.prototype.on = function(event, options, method) {
      return this.ready((function(_this) {
        return function() {
          options = _.defaults({}, options, {
            name: _this.name + '.' + event,
            type: _this.name + '.' + event,
            routingKey: event,
            autoDelete: options.persistent === false,
            durable: options.persistent !== false,
            context: _this
          });
          options.process = function(message, cb) {
            var base, base1;
            if ((base = message.body).type == null) {
              base.type = message.fields.routingKey;
            }
            if ((base1 = message.body).typeArray == null) {
              base1.typeArray = message.fields.routingKey.split('.');
            }
            if (!_this.filter(options.filter, message.body)) {
              return cb(null, 'Filtered');
            }
            return method(message.body, cb);
          };
          return _this.connection.createQueue(event, options);
        };
      })(this));
    };

    Manager.prototype.emit = function(event, body, cb) {
      return this.ready((function(_this) {
        return function() {
          return _this.connection.publish(event, body, {
            routingKey: event
          }, cb);
        };
      })(this));
    };

    return Manager;

  })();

  module.exports = new Manager();

}).call(this);

//# sourceMappingURL=index.js.map
